window.addEventListener("load",function() {

    /* temporarily we will load on the front page so that we don't need to login with twitter */
    //  if ($('#heart-core').length !== 1) return;

    var Q = window.Q = Quintus({ imagePath: "/", dataPath: "/", development: true })
    .include("Sprites, Scenes, Input, 2D, UI, Anim")
    .setup("heart-core", { width: 28*32, height: 18*32 });


    Q.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        return function() {
            context = this;
            args = arguments;
            timestamp = new Date();
            var later = function() {
                var last = (new Date()) - timestamp;
                if (last < wait) {
                    timeout = setTimeout(later, wait - last);
                } else {
                    timeout = null;
                    if (!immediate) result = func.apply(context, args);
                }
            };
            var callNow = immediate && !timeout;
            if (!timeout) {
                timeout = setTimeout(later, wait);
            }
            if (callNow) result = func.apply(context, args);
            return result;
        };
    };


    Q.animations('player', {
        move_left: { frames: [165, 166], rate: 1/2},
        move_right: { frames: [167, 168], rate:1/2 },
        move_up: { frames: [164,184], rate: 1/2 },
        move_down: { frames: [185, 186], rate: 1/2 },
        stand: { frames: [185], rate: 1/2 },
    });

    Q.animations('sword', {
            stab_right: { frames: [204, 205, 206], rate: 1/15, trigger: "stabDone", loop: false }
    });

    Q.getActiveStage = function () {
        return Q.stages[0];
    };

    var SPRITE_PLAYER = 1;
    var SPRITE_TILES  = 2;
    var SPRITE_ENEMY  = 4;
    var SPRITE_DOT    = 8;

    var ROOM_WIDTH  = 448*2;
    var ROOM_HEIGHT = 288*2;

    var LEFT  = [-1,  0];
    var RIGHT = [ 1,  0];
    var UP    = [ 0, -1];
    var DOWN  = [ 0,  1];

    var DIRECTIONS = [LEFT, RIGHT, UP, DOWN];

    Q.input.keyboardControls();
    Q.input.joypadControls();

    Q.gravityY = 0;
    Q.gravityX = 0;

    Q.rooms = {
        dimensions: { w: 2, h:  2 },
        items: ['<%= asset_path("room_0.tmx") %>', '<%= asset_path("room_1.tmx") %>', '<%= asset_path("room_2.tmx") %>', '<%= asset_path("room_3.tmx") %>']
    };

    Q.state.damagePlayer = function (amount) {
        this.set("damage", this.p.damage + amount);
    };

    Q.state.checkPlayerDeath = function () {
        if (2 * this.p.hp > this.p.damage) return;

        /* player is dead */
        Q.stageScene("endGame",1, { label: "Game Over" }); 
    };

    /* this is a little weird: the room list is an array with
     * a width and height specified. If the player goes left,
     * or up, I can determine the next spot in the array to
     * use. There are edge cases, such as the player going "left"
     * when they are already at the left-most room. In this
     * case my solution won't work, because left would wrap them
     * around the world. However, I can ignore those cases, since
     * the left-most room will not have an exit left option.
     * (NOTE: it also makes for a cool glitch later) */
    Q.state.offsetForDirection = function (direction) {
        /* TODO name this variable */
        var what_to_call_this = [1, Q.rooms.dimensions.w];

        for (i = 0; i < 2; i++) {
            what_to_call_this[i] *= direction[i];
        }

        return (what_to_call_this[0] !== 0)? what_to_call_this[0] : what_to_call_this[1];
    };

    Q.state.nextRoom = function (direction) {

        var offset = this.offsetForDirection(direction);
        var room_file = Q.rooms.items[this.p.room + offset];

        Q.state.set("room", this.p.room + offset); // update the current room

        var room_origin = {
            x: ROOM_WIDTH * direction[0],
            y: ROOM_HEIGHT * direction[1]
        }

        /* going from room 2 to room 3 we do x: 224, y: 0 */
        return new Q.Room({
            dataAsset: room_file,
            layerIndex: 0,
            sheet: 'hand',
            tileW: 32,
            tileH: 32,
            x: room_origin.x / 2,
            y: room_origin.y / 2,
            type: SPRITE_TILES
        });
    };

    Q.monsters = [
        [
           ["HeartBlade", { x: 22*32 + 2*16, y: 1*32 + 3*16}],
           ["HeartTree",  { x: 7*32 + 4*16, y: 0 + 3*16 }],
           ["Bush", { x: 5*32 + 16,  y: 3*32 + 16}],
           ["Bush", { x: 6*32 + 16,  y: 5*32 + 16}],
           ["Bush", { x: 6*32 + 16,  y: 7*32 + 16}],
           ["Bush", { x: 6*32 + 16,  y: 9*32 + 16}],
           ["Bush", { x: 12*32 + 16,  y: 3*32 + 16}],
           ["Bush", { x: 11*32 + 16,  y: 5*32 + 16}],
           ["Bush", { x: 11*32 + 16,  y: 7*32 + 16}],
           ["Bush", { x: 11*32 + 16,  y: 9*32 + 16}],
           ["Monster", { x: 18*32 + 16,  y: 8*32 + 16}],
           ["Monster", { x: 20*32 + 16,  y: 8*32 + 16}],
           ["Monster", { x: 22*32 + 16,  y: 8*32 + 16}],
           ["Monster", { x: 18*32 + 16,  y: 10*32 + 16}],
           ["Monster", { x: 20*32 + 16,  y: 10*32 + 16}],
           ["Monster", { x: 22*32 + 16,  y: 10*32 + 16}],
           ["Monster", { x: 18*32 + 16,  y: 12*32 + 16}],
           ["Monster", { x: 20*32 + 16,  y: 12*32 + 16}],
           ["Monster", { x: 22*32 + 16,  y: 12*32 + 16}]
        ],
        [],
        [
           ["Monster", { x: 10*32 + 16,  y: 4*32 + 16}],
           ["Monster", { x: 12*32 + 16,  y: 4*32 + 16}],
           ["Monster", { x: 14*32 + 16,  y: 4*32 + 16}],
           ["Monster", { x: 10*32 + 16,  y: 6*32 + 16}],
           ["Monster", { x: 12*32 + 16,  y: 6*32 + 16}],
           ["Monster", { x: 14*32 + 16,  y: 6*32 + 16}],
           ["Bush", { x: 10*32 + 16,  y: 9*32 + 16}],
           ["Bush", { x: 12*32 + 16,  y: 9*32 + 16}],
           ["Bush", { x: 14*32 + 16,  y: 9*32 + 16}],
           ["Bush", { x: 10*32 + 16,  y: 11*32 + 16}],
           ["Bush", { x: 12*32 + 16,  y: 11*32 + 16}],
           ["Bush", { x: 14*32 + 16,  y: 11*32 + 16}]
        ],
        []
    ]

    Q.TileLayer.extend("Room", {
        init: function (p) {
            this._super(p);

            this.add("tween");
            this.del("2d");
        },

        populate: function (stage) {
            var monster_list = Q.monsters[Q.state.get("room")];

            for (i = 0; i < monster_list.length; i++) {
                var monster = monster_list[i];
                var klass = Q[monster[0]];
                var options = monster[1];

                stage.insert(new klass(options));
            }
        }
    });

    Q.Sprite.extend("Heart", {
        init: function (p) {
            p.asset  = '<%= asset_path("full-heart.png") %>';
            p.damage = 0;

            this._super(p);
        },

        breakHeart: function () {
            if (this.p.asset === '<%= asset_path("broken-heart.png") %>') return;

            this.p.damage += 1;
            this.p.asset = (this.p.damage === 1)? '<%= asset_path("half-heart.png") %>' : '<%= asset_path("broken-heart.png") %>';

            return this;
        }
    });

    Q.Sprite.extend("Monster", {
        init: function (p) {
            p.family = "Monster";
            this._super(p, {
                sheet: "hand",
                stepDistance: 32,
                frame: 149,
                type: SPRITE_ENEMY,
                collisionMask: SPRITE_TILES | SPRITE_ENEMY | SPRITE_PLAYER,
                hp: 2
            });

            this.add("2d, wandering");

            this.on("bump.left, bump.right, bump.top, bump.bottom", this.melee);
            this.damagePlayer = Q.debounce(function (amount) {
                Q.state.damagePlayer(amount);
            });
        },

        takeDamage: function (amount) {
            this.p.hp -= amount;

            if (this.p.hp < 1) {
                this.destroy();
            }
        },

        melee: function (col) {

            if (col.obj.isA("Player")) {
                this.damagePlayer(1);
            }
        }
    });

    Q.Monster.extend("Bush", {
        init: function (p) {
            p.frame = 158;
            p.hp = 1;

            this._super(p);
            this.del("wandering");
        },

        melee: function (col) {
            // it is a bush...
        }
    });

    Q.Sprite.extend("HeartTree", {
        init: function (p) {
            p.asset = '<%= asset_path("heart_tree.png") %>';
            p.type = SPRITE_TILES;

            this._super(p);
        }
    });

    Q.Sprite.extend("HeartBlade", {
        init: function (p) {
            p.asset = '<%= asset_path("heart_blade.png") %>';
            p.type = SPRITE_TILES;

            this._super(p);
        }
    });

    Q.Sprite.extend("Sword", {
        init: function (p) {
            p.sheet = "hand";
            p.frame = 186;
            p.sprite = "sword";

            this._super(p);
            this.add("2d, animation");
            this.on("stabDone");

            this.on("bump.left, bump.right, bump.top, bump.bottom", this.melee);
            this.damageMonster = Q.debounce(function (obj, amount) {
                obj.takeDamage(amount);
            });
        },

        melee: function (col) {
            if (col.obj.p.family === "Monster") {
                this.damageMonster(col.obj, 1);
            }
        },

        stabDone: function () {
            this.stage.remove(this);
        },

    });

    Q.Sprite.extend("Player", {
        init: function(p) {
            p.z = 1; // player on TOP!
            p.sprite = "player";
            p.stepDistance = 24;
            p.stepDelay = 0.1;

            /* TODO for debugging */
            p.sword = Q.state.get("sword");

            this._super(p,{
                sheet:"hand",
                frame: 186,
                type: SPRITE_PLAYER,
                collisionMask: SPRITE_TILES | SPRITE_ENEMY | SPRITE_DOT
            });

            this.add("2d, stepControls, tween, animation, heartAction");

            this.heartAction = Q.debounce(this._heartAction, 500);
            this.melee       = Q.debounce(this._melee, 50);
            this.sword       = new Q.Sword({});

            this.on("hit", this.talk);
            this.on("step", this.checkBounds);
        },

        talk: function (col) {
            console.log("in talk");
            console.log("col: %o", col.obj.className);

            if (col.obj.isA("HeartTree") && Q.state.get("hp") < 3) {
                (Q.debounce(function () {
                    $("[data-target=#heart-talk]").trigger("click.bs.modal.data-api");
                }, 500))();

            } else if (col.obj.isA("HeartBlade") && Q.state.get("hp") >= 3) {
                (Q.debounce(function () {
                    Q.state.set("sword", true);
                    $("[data-target=#blade-get]").trigger("click.bs.modal.data-api");
                    col.obj.p.asset = "<%= asset_path('stone.png') %>";
                }, 500))();
            }
        },

        _melee: function () {
            if (this.p.sword === false) return;

            this.sword.p.x = this.p.x + 16;
            this.sword.p.y = this.p.y;
            Q.getActiveStage().insert(this.sword);
            this.sword.play("stab_right");
        },

        _heartAction: function () {
            $("[data-toggle=modal]").trigger("click.bs.modal.data-api");
        },

        /* if the player leaves the scene, we stage the next scene */
        checkBounds: function () {
            var rel_x = this.p.x;
            var rel_y = this.p.y;

            $('#player_x').text(rel_x);
            $('#player_y').text(rel_y);
            var out_x = (0 < rel_x && rel_x < ROOM_WIDTH) ? false : true;
            var out_y = (0 < rel_y && rel_y < ROOM_HEIGHT) ? false : true;
            var exiting = out_x || out_y;

            Q.state.set("exiting", exiting);
        },

        step: function(dt) {
            if(this.p.diffX > 0) {
                this.play("move_right");
            } else if(this.p.diffX < 0) {
                this.play("move_left");
            } else if (this.p.diffY > 0) {
                this.play("move_down");
            } else if (this.p.diffY < 0) {
                this.play("move_up");
            } else {
                this.play("stand");
            }
        }
    });

    Q.scene("heart_bar", function(stage) {
        stage.p = {};

        var hearts = [];
        for (i = 0; i < Q.state.get("hp"); i++) {
            offset = 32 * i + 20;
            hearts.push(new Q.Heart({
                x: ROOM_WIDTH - 36 - (32 * i),
                y: 36
            }));

            heart = stage.insert(hearts[i]);
            heart.on("click", heart.giveHeart);
        };

        stage.p.hearts = hearts;
        /* when the player loses hearts we 
         * do this */
        this.updateHearts = function (hp) {
            var length = stage.p.hearts.length;

            for (; length > hp; length--) {
                var heart = stage.p.hearts.pop();

                stage.remove(heart);
            }

            Q.state.checkPlayerDeath();
        };

        this.breakHeart = function (damage) {
            var sentinel = true;
            var i = 0;
            var length = stage.p.hearts.length;

            while (sentinel && i < length) {
                var heart = stage.p.hearts[i];

                if (heart.p.damage < 2) {
                    heart.breakHeart();
                    sentinel = false;
                }

                i += 1;
            }

            Q.state.checkPlayerDeath();
        };

        Q.state.on("change.hp", this.updateHearts);
        Q.state.on("change.damage", this.breakHeart);
    });

    Q.scene("endGame",function(stage) {
        alert("game over");
        window.location = "";
    });

    Q.scene("overworld",function(stage) {
        var starting_x = 4*32 + 16;
        var starting_y = 5*32 + 16;

        Q.state.reset({
            // the universal coords of the current room
            room: 2,
            room_x: 0,
            room_y: 0,
            hp: $('[data-hp]').data('hp') || 1,
            damage: 0,
            sword: $('[data-sword]').data('sword') || true,

            // whether the game state thinks the player is "leaving"
            exiting: false
        });

        stage.p = {};
        stage.p.rooms = [];

        var room       = new Q.Room({ dataAsset: Q.rooms.items[Q.state.get("room")], layerIndex: 0, sheet: 'hand', tileW: 32, tileH: 32, type: SPRITE_TILES });
        var background = new Q.Room({ dataAsset: '<%= asset_path("background.tmx") %>', layerIndex: 0, sheet: 'hand', tileW: 32, tileH: 32, type: Q.SPRITE_NONE });
        stage.insert(background);
        stage.collisionLayer(room);
        stage.p.rooms[Q.state.get("room")] = room;

        var player  = stage.insert(new Q.Player({  x: starting_x, y: starting_y }));

        room.populate(stage);

        stage.getRoom = function (i) {
            return this.p.rooms[i];
        };

        this.zeldaSlide = function () {
            if (Q.state.get("exiting") === false) return false;

            var player = Q('Player').first();
            var p = player.p;

            var rel_x = p.x;
            var rel_y = p.y;

            /* we know that the player is exiting, we have but
             * to determine the direction */
            var direction =     (rel_x < 0)? LEFT           :
                                (rel_y < 0)? UP             :
                                (rel_x > ROOM_WIDTH)? RIGHT : DOWN;

            var stage = Q.getActiveStage();
            var current_room = stage.getRoom(Q.state.get("room"));
            var new_room = Q.state.nextRoom(direction);

            /* set rel_x and rel_y so that the relevant one is near zero */
            if (direction[0] !== 0) {
                rel_x += (direction[0] < 0)? ROOM_WIDTH  : -ROOM_WIDTH;

            } else {
                rel_y += (direction[1] < 0)? ROOM_HEIGHT : -ROOM_HEIGHT;
            }

            /* we slide room 2 to x: -224, y: 224 and room 3 to x: 0, y: 0 */

            Q('Monster').each(function () {
                this.destroy();
            });

            Q('Bush').each(function () {
                this.destroy();
            });

            Q('HeartTree').each(function () {
                this.destroy();
            });

            stage.collisionLayer(new_room);
            stage.p.rooms[Q.state.get("room")] = new_room;
            current_room.animate({ x: -(direction[0]) * (ROOM_WIDTH / 2), y: -(direction[1]) * (ROOM_HEIGHT / 2) }, {
                callback: function () {
                    stage.remove(current_room);
                }
            });

            new_room.animate({ x: 0, y:0 }, {
                callback: function () {
                    new_room.populate(stage);
                }
            });

            player.animate({ x: rel_x, y: rel_y });
        };

        /* later, add this to a component called "zeldaSlide" */
        Q.state.on("change.exiting", this.zeldaSlide);
    });

    console.log("<%= asset_path("full-heart.png") %>, <%= asset_path("half-heart.png") %>, <%= asset_path("broken-heart.png") %>, <%= asset_path("background.tmx") %>, <%= asset_path("zelda_hand_tiles.png") %>, <%= asset_path("zelda_hand_test.tmx") %>, <%= asset_path("room_0.tmx") %>, <%= asset_path("room_1.tmx") %>, <%= asset_path("room_2.tmx") %>, <%= asset_path("room_3.tmx") %>");
    Q.load("<%= asset_path('stone.png')%>, <%= asset_path('heart_blade.png')%>, <%= asset_path('heart_tree.png')%>, <%= asset_path("full-heart.png") %>, <%= asset_path("half-heart.png") %>, <%= asset_path("broken-heart.png") %>, <%= asset_path("background.tmx") %>, <%= asset_path("zelda_hand_tiles.png") %>, <%= asset_path("zelda_hand_test.tmx") %>, <%= asset_path("room_0.tmx") %>, <%= asset_path("room_1.tmx") %>, <%= asset_path("room_2.tmx") %>, <%= asset_path("room_3.tmx") %>", function() {
        Q.sheet("hand","<%= asset_path('zelda_hand_tiles.png') %>", { tilew: 32, tileh: 32});
        Q.stageScene("overworld", 0, { sort: function (a, b) {
            return a.p.z > b.p.z;
        }});
        Q.stageScene("heart_bar", 1);

        /* the player could already be dead... */
        Q.state.checkPlayerDeath();
    });

    Q.component("wandering", {
        added: function () {
            var p = this.entity.p;

            if(!p.stepDistance) { p.stepDistance = 32; }
            if(!p.stepDelay) { p.stepDelay = 0.5; }

            p.stepWait = 0;
            this.entity.on("step",this,"step");
            this.entity.on("hit", this,"collision");
        },

        collision: function(col) {
          var p = this.entity.p;

          if(p.stepping) {
            p.stepping = false;
            p.x = p.origX;
            p.y = p.origY;
          }

        },

        step: function (dt) {
          var p = this.entity.p,
              moved = false;
          p.stepWait -= dt;

          if(p.stepping) {
            p.x += p.diffX * dt / p.stepDelay;
            p.y += p.diffY * dt / p.stepDelay;
          }

          if(p.stepWait > 0) { return; }
          if(p.stepping) {
            p.x = p.destX;
            p.y = p.destY;
          }
          p.stepping = false;

          p.diffX = 0;
          p.diffY = 0;

          var input = DIRECTIONS[parseInt(Math.random() * 10, 10) % 4];

          if(input === LEFT) {
            p.diffX = -p.stepDistance;
          } else if(input === RIGHT) {
            p.diffX = p.stepDistance;
          }

          if(input === UP) {
            p.diffY = -p.stepDistance;
          } else if(input === DOWN) {
            p.diffY = p.stepDistance;
          }

          if(p.diffY || p.diffX ) { 
            p.stepping = true;
            p.origX = p.x;
            p.origY = p.y;
            p.destX = p.x + p.diffX;
            p.destY = p.y + p.diffY;
            p.stepWait = p.stepDelay; 
          }
        }
    })

    Q.component("heartAction", {

        added: function() {
            var p = this.entity.p;

            this.entity.on("step", this, "step");
        },

        step: function(dt) {
            var p = this.entity.p;

            if(Q.inputs['action']) {
                this.entity.heartAction();
            } else if (Q.inputs['fire']) {
                this.entity.melee();
            }
        }
    });
});

